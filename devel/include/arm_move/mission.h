// Generated by gencpp from file arm_move/mission.msg
// DO NOT EDIT!


#ifndef ARM_MOVE_MESSAGE_MISSION_H
#define ARM_MOVE_MESSAGE_MISSION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace arm_move
{
template <class ContainerAllocator>
struct mission_
{
  typedef mission_<ContainerAllocator> Type;

  mission_()
    : type(0)
    , T()
    , E()
    , L()  {
    }
  mission_(const ContainerAllocator& _alloc)
    : type(0)
    , T(_alloc)
    , E(_alloc)
    , L(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _T_type;
  _T_type T;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _E_type;
  _E_type E;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _L_type;
  _L_type L;





  typedef boost::shared_ptr< ::arm_move::mission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_move::mission_<ContainerAllocator> const> ConstPtr;

}; // struct mission_

typedef ::arm_move::mission_<std::allocator<void> > mission;

typedef boost::shared_ptr< ::arm_move::mission > missionPtr;
typedef boost::shared_ptr< ::arm_move::mission const> missionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_move::mission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_move::mission_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_move::mission_<ContainerAllocator1> & lhs, const ::arm_move::mission_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.T == rhs.T &&
    lhs.E == rhs.E &&
    lhs.L == rhs.L;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_move::mission_<ContainerAllocator1> & lhs, const ::arm_move::mission_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_move::mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_move::mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_move::mission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_move::mission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_move::mission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_move::mission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_move::mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ebf46cc34619c6ab6b248306e7f7e41";
  }

  static const char* value(const ::arm_move::mission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ebf46cc34619c6aULL;
  static const uint64_t static_value2 = 0xb6b248306e7f7e41ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_move::mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_move/mission";
  }

  static const char* value(const ::arm_move::mission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_move::mission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 type\n"
"geometry_msgs/Point T\n"
"geometry_msgs/Point E\n"
"geometry_msgs/Point L\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::arm_move::mission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_move::mission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.T);
      stream.next(m.E);
      stream.next(m.L);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_move::mission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_move::mission_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "T: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.T);
    s << indent << "E: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.E);
    s << indent << "L: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.L);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MOVE_MESSAGE_MISSION_H
